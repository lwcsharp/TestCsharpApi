{
	"info": {
		"_postman_id": "0d2ece9a-8a57-4636-baa2-ff1e443ba477",
		"name": "Example",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34795291"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Login as admin",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"thomas@nodehill.com\",\n    \"password\": \"12345678\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3001/api/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup all test data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Test data to use, pasted from our json file with test data",
									"let testData = {",
									"  \"counter\": 0,",
									"  \"categories\": [",
									"    {",
									"      \"name\": \"Grönsaker\",",
									"      \"description\": \"Färska grönsaker.\"",
									"    },",
									"    {",
									"      \"name\": \"Frukter\",",
									"      \"description\": \"Färska frukter.\"",
									"    },",
									"    {",
									"      \"name\": \"Rengöringsprodukter\",",
									"      \"description\": \"Allt du behöver för att hålla hemmet rent.\"",
									"    }",
									"  ],",
									"  \"products\": [",
									"    {",
									"      \"name\": \"Gurka\",",
									"      \"description\": \"Färsk, knaprigt gurka. EKO odlad i Bjärred.\",",
									"      \"price\": 10,",
									"      \"categoryId\": \"Grönsaker\"",
									"    },",
									"    {",
									"      \"name\": \"Äpple\",",
									"      \"description\": \"Färsk, krispig Äpple. EKO odlad i Kivik.\",",
									"      \"price\": 5,",
									"      \"categoryId\": \"Frukter\"",
									"    }",
									"  ],",
									"  \"commentsAdminMakes\": [",
									"    {",
									"      \"comment\": \"Fräsch och knaprigt!\",",
									"      \"productId\": \"Gurka\",",
									"      \"userId\": 3",
									"    }",
									"  ],",
									"    \"commentsUserMakes\": [",
									"    {",
									"      \"comment\": \"Sött och krispigt!\",",
									"      \"productId\": \"Äpple\",",
									"      \"userId\": 4",
									"    }",
									"  ],",
									"}",
									"",
									"// Set the test data as a collection variable",
									"// (collection variables are available",
									"//. for all requests in a colleciton)",
									"pm.collectionVariables.set(\"testData\",testData);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Not doing any tests here"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001"
						}
					},
					"response": []
				},
				{
					"name": "Create categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the test data",
									"let testData = pm.collectionVariables.get(\"testData\");",
									"// Get the current category",
									"let category = testData.categories[testData.counter];",
									"",
									"// Read the response",
									"let response = pm.response;",
									"// Read the response data",
									"let responseData = pm.response.json();",
									"",
									"// Test that we get a 200 code (ok request) back",
									"pm.test(\"We should get an ok (code 200) back\",()=> {",
									"    pm.expect(response.code).to.equal(200);",
									"});",
									"",
									"// Test that affected rows equals 1",
									"pm.test(\"Expect rowsAffected to equal 1\", () => {",
									"    pm.expect(responseData.rowsAffected).to.equal(1);",
									"});",
									"",
									"// Test that we get an insert id back",
									"// also add the id in our test data (for future tests)",
									"pm.test(\"We should get an insertId back\", () => {",
									"    pm.expect(responseData.insertId).to.be.a('number');",
									"    // Add the property id to the category with the",
									"    // id recieved from the REST-api",
									"    category.id = responseData.insertId;",
									"    // Log",
									"    console.log(\"The category has been created\", category);",
									"});",
									"",
									"// Update the counter and save the updated test data",
									"// (also including the id we set in the second test)",
									"testData.counter++;",
									"pm.collectionVariables.set(\"testData\",testData);",
									"",
									"// If there are more categories - then \"loop\"",
									"// through them using setNextRequest",
									"if(testData.categories[testData.counter]){",
									"    pm.execution.setNextRequest(\"Create categories\");",
									"}",
									"// Otherwise console.log \"All done\"",
									"else {",
									"    console.log(\"All categories have been created.\");",
									"    // IMPORTANT: Set counter to 0 in preparation of next request",
									"    testData.counter = 0;",
									"    pm.collectionVariables.set(\"testData\",testData);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the test data",
									"let testData = pm.collectionVariables.get(\"testData\");",
									"// Get the current category",
									"let category = testData.categories[testData.counter];",
									"",
									"// pm variables have a scope of one request",
									"// setting two variables used in the body",
									"pm.variables.set(\"name\", category.name);",
									"pm.variables.set(\"description\", category.description);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3001/api/categories",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get categories",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the test data",
									"let testData = pm.collectionVariables.get(\"testData\");",
									"// Get the current category",
									"let category = testData.categories[testData.counter];",
									"",
									"// Set a pm variable to id (it is used in the request url)",
									"pm.variables.set(\"id\", category.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the test data",
									"let testData = pm.collectionVariables.get(\"testData\");",
									"// Get the current category",
									"let category = testData.categories[testData.counter];",
									"",
									"// Read the response",
									"let response = pm.response;",
									"// Read the response data",
									"let responseData = pm.response.json();",
									"",
									"// Test that we get a 200 code (ok request) back",
									"pm.test(\"We should get an ok (code 200) back\",()=> {",
									"    pm.expect(response.code).to.equal(200);",
									"});",
									"",
									"// Test that the REST-api returns the sama data",
									"// as our test data for the category",
									"pm.test(\"Test that the correct category data is returned\", ()=> {",
									"  console.log(\"category\", category);",
									"  console.log(\"responseData\", responseData);",
									"  pm.expect(category).to.deep.equal(responseData); ",
									"});",
									"",
									"// Update the counter and save the updated test data",
									"testData.counter++;",
									"pm.collectionVariables.set(\"testData\",testData);",
									"",
									"// If there are more categories - then \"loop\"",
									"// through them using setNextRequest",
									"if(testData.categories[testData.counter]){",
									"    pm.execution.setNextRequest(\"Get categories\");",
									"}",
									"// Otherwise console.log \"All done\"",
									"else {",
									"    console.log(\"All categories have been read correctly.\");",
									"    // IMPORTANT: Set counter to 0 in preparation of next request",
									"    testData.counter = 0;",
									"    pm.collectionVariables.set(\"testData\",testData);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"categories",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the test data",
									"let testData = pm.collectionVariables.get(\"testData\");",
									"// Get the current category",
									"let category = testData.categories[testData.counter];",
									"",
									"// Read the response",
									"let response = pm.response;",
									"// Read the response data",
									"let responseData = pm.response.json();",
									"",
									"// Test that we get a 200 code (ok request) back",
									"pm.test(\"We should get an ok (code 200) back\",()=> {",
									"    pm.expect(response.code).to.equal(200);",
									"});",
									"",
									"// Test that affected rows equals 1",
									"pm.test(\"Expect rowsAffected to equal 1\", () => {",
									"    pm.expect(responseData.rowsAffected).to.equal(1);",
									"});",
									"",
									"// Update the counter and save the updated test data",
									"testData.counter++;",
									"pm.collectionVariables.set(\"testData\",testData);",
									"",
									"// If there are more categories - then \"loop\"",
									"// through them using setNextRequest",
									"if(testData.categories[testData.counter]){",
									"    pm.execution.setNextRequest(\"Change categories\");",
									"}",
									"// Otherwise console.log \"All done\"",
									"else {",
									"    console.log(\"All category-decriptions have been changed.\");",
									"    // IMPORTANT: Set counter to 0 in preparation of next request",
									"    testData.counter = 0;",
									"    pm.collectionVariables.set(\"testData\",testData);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the test data",
									"let testData = pm.collectionVariables.get(\"testData\");",
									"// Get the current category",
									"let category = testData.categories[testData.counter];",
									"",
									"// Change the description and save to collectionVariables",
									"category.description += \" Some extra text in the description.\";",
									"pm.collectionVariables.set(\"testData\", testData);",
									"",
									"// Set a pm variable to id (it is used in the request url)",
									"pm.variables.set(\"id\", category.id); ",
									"",
									"// Set a pm variable to description (it is used in the request body)",
									"pm.variables.set(\"description\", category.description);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"{{description}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"categories",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get categories after change",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the test data",
									"let testData = pm.collectionVariables.get(\"testData\");",
									"// Get the current category",
									"let category = testData.categories[testData.counter];",
									"",
									"// Set a pm variable to id (it is used in the request url)",
									"pm.variables.set(\"id\", category.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the test data",
									"let testData = pm.collectionVariables.get(\"testData\");",
									"// Get the current category",
									"let category = testData.categories[testData.counter];",
									"",
									"// Read the response",
									"let response = pm.response;",
									"// Read the response data",
									"let responseData = pm.response.json();",
									"",
									"// Test that we get a 200 code (ok request) back",
									"pm.test(\"We should get an ok (code 200) back\",()=> {",
									"    pm.expect(response.code).to.equal(200);",
									"});",
									"",
									"// Test that the REST-api returns the sama data",
									"// as our test data for the category",
									"pm.test(\"Test that the correct category data is returned\", ()=> {",
									"  console.log(\"category\", category);",
									"  console.log(\"responseData\", responseData);",
									"  pm.expect(category).to.deep.equal(responseData); ",
									"});",
									"",
									"// Update the counter and save the updated test data",
									"testData.counter++;",
									"pm.collectionVariables.set(\"testData\",testData);",
									"",
									"// If there are more categories - then \"loop\"",
									"// through them using setNextRequest",
									"if(testData.categories[testData.counter]){",
									"    pm.execution.setNextRequest(\"Get categories after change\");",
									"}",
									"// Otherwise console.log \"All done\"",
									"else {",
									"    console.log(\"All categories have been read correctly after the change.\");",
									"    // IMPORTANT: Set counter to 0 in preparation of next request",
									"    testData.counter = 0;",
									"    pm.collectionVariables.set(\"testData\",testData);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"categories",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the test data",
									"let testData = pm.collectionVariables.get(\"testData\");",
									"",
									"// Get the current products",
									"let product = testData.products[testData.counter];",
									"",
									"// Replace the category name in the property categoryId",
									"// with actual id of the category",
									"",
									"// Find the correct category",
									"let categoryWithMatchingName = testData.categories.find(category => {",
									"    return category.name == product.categoryId",
									"});",
									"// Change the categoryId property of the product",
									"// to the id of the matching category",
									"product.categoryId = categoryWithMatchingName.id;",
									"",
									"// Save changes to our test data (the new value of categoryId)",
									"pm.collectionVariables.set(\"testData\",testData);",
									"",
									"// pm variables have a scope of one request",
									"// setting four variables used in the body",
									"pm.variables.set(\"name\", product.name);",
									"pm.variables.set(\"description\", product.description);",
									"pm.variables.set(\"price\", product.price);",
									"pm.variables.set(\"categoryId\", product.categoryId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the test data",
									"let testData = pm.collectionVariables.get(\"testData\");",
									"// Get the current category",
									"let product = testData.products[testData.counter];",
									"",
									"// Read the response",
									"let response = pm.response;",
									"// Read the response data",
									"let responseData = pm.response.json();",
									"",
									"// Test that we get a 200 code (ok request) back",
									"pm.test(\"We should get an ok (code 200) back\",()=> {",
									"    pm.expect(response.code).to.equal(200);",
									"});",
									"",
									"// Test that affected rows equals 1",
									"pm.test(\"Expect rowsAffected to equal 1\", () => {",
									"    pm.expect(responseData.rowsAffected).to.equal(1);",
									"});",
									"",
									"// Test that we get an insert id back",
									"// also add the id in our test data (for future tests)",
									"pm.test(\"We should get an insertId back\", () => {",
									"    pm.expect(responseData.insertId).to.be.a('number');",
									"    // Add the property id to the category with the",
									"    // id recieved from the REST-api",
									"    product.id = responseData.insertId;",
									"    // Log",
									"    console.log(\"The product has been created\", product);",
									"});",
									"",
									"// Update the counter and save the updated test data",
									"// (also including the id we set in the second test)",
									"testData.counter++;",
									"pm.collectionVariables.set(\"testData\",testData);",
									"",
									"// If there are more products - then \"loop\"",
									"// through them using setNextRequest",
									"if(testData.products[testData.counter]){",
									"    pm.execution.setNextRequest(\"Create products\");",
									"}",
									"// Otherwise console.log \"All done\"",
									"else {",
									"    console.log(\"All products have been created.\");",
									"    // IMPORTANT: Set counter to 0 in preparation of next request",
									"    testData.counter = 0;",
									"    pm.collectionVariables.set(\"testData\",testData);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"price\": {{price}},\n    \"categoryId\": {{categoryId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3001/api/products",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the test data\r",
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"// Get the current category\r",
									"let product = testData.products[testData.counter];\r",
									"\r",
									"// Set a pm variable to id (it is used in the request url)\r",
									"pm.variables.set(\"id\", product.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the test data\r",
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"// Get the current product\r",
									"let product = testData.products[testData.counter];\r",
									"\r",
									"// Read the response\r",
									"let response = pm.response;\r",
									"// Read the response data\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Test that we get a 200 code (ok request) back\r",
									"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test that the REST-api returns the sama data\r",
									"// as our test data for the product\r",
									"pm.test(\"Test that the correct product data is returned\", ()=> {\r",
									"  console.log(\"product\", product);\r",
									"  console.log(\"responseData\", responseData);\r",
									"  pm.expect(product).to.deep.equal(responseData); \r",
									"});\r",
									"\r",
									"// Update the counter and save the updated test data\r",
									"testData.counter++;\r",
									"pm.collectionVariables.set(\"testData\",testData);\r",
									"\r",
									"// If there are more products - then \"loop\"\r",
									"// through them using setNextRequest\r",
									"if(testData.products[testData.counter]){\r",
									"    pm.execution.setNextRequest(\"Get products\");\r",
									"}\r",
									"// Otherwise console.log \"All done\"\r",
									"else {\r",
									"    console.log(\"All products have been read correctly.\");\r",
									"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
									"    testData.counter = 0;\r",
									"    pm.collectionVariables.set(\"testData\",testData);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/products/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the test data\r",
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"// Get the current product\r",
									"let product = testData.products[testData.counter];\r",
									"\r",
									"// Change the description and save to collectionVariables\r",
									"product.description += \" Some extra text in the description.\";\r",
									"pm.collectionVariables.set(\"testData\", testData);\r",
									"\r",
									"// Set a pm variable to id (it is used in the request url)\r",
									"pm.variables.set(\"id\", product.id); \r",
									"\r",
									"// Set a pm variable to description (it is used in the request body)\r",
									"pm.variables.set(\"description\", product.description);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the test data\r",
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"// Get the current product\r",
									"let product = testData.products[testData.counter];\r",
									"\r",
									"// Read the response\r",
									"let response = pm.response;\r",
									"// Read the response data\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Test that we get a 200 code (ok request) back\r",
									"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test that affected rows equals 1\r",
									"pm.test(\"Expect rowsAffected to equal 1\", () => {\r",
									"    pm.expect(responseData.rowsAffected).to.equal(1);\r",
									"});\r",
									"\r",
									"// Update the counter and save the updated test data\r",
									"testData.counter++;\r",
									"pm.collectionVariables.set(\"testData\",testData);\r",
									"\r",
									"// If there are more products - then \"loop\"\r",
									"// through them using setNextRequest\r",
									"if(testData.products[testData.counter]){\r",
									"    pm.execution.setNextRequest(\"Change products\");\r",
									"}\r",
									"// Otherwise console.log \"All done\"\r",
									"else {\r",
									"    console.log(\"All product-decriptions have been changed.\");\r",
									"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
									"    testData.counter = 0;\r",
									"    pm.collectionVariables.set(\"testData\",testData);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"{{description}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3001/api/products/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products after change",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the test data",
									"let testData = pm.collectionVariables.get(\"testData\");",
									"// Get the current product",
									"let product = testData.products[testData.counter];",
									"",
									"// Set a pm variable to id (it is used in the request url)",
									"pm.variables.set(\"id\", product.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the test data",
									"let testData = pm.collectionVariables.get(\"testData\");",
									"// Get the current category",
									"let product = testData.products[testData.counter];",
									"",
									"// Read the response",
									"let response = pm.response;",
									"// Read the response data",
									"let responseData = pm.response.json();",
									"",
									"// Test that we get a 200 code (ok request) back",
									"pm.test(\"We should get an ok (code 200) back\",()=> {",
									"    pm.expect(response.code).to.equal(200);",
									"});",
									"",
									"// Test that the REST-api returns the sama data",
									"// as our test data for the product",
									"pm.test(\"Test that the correct product data is returned\", ()=> {",
									"  console.log(\"product\", product);",
									"  console.log(\"responseData\", responseData);",
									"  pm.expect(product).to.deep.equal(responseData); ",
									"});",
									"",
									"// Update the counter and save the updated test data",
									"testData.counter++;",
									"pm.collectionVariables.set(\"testData\",testData);",
									"",
									"// If there are more products - then \"loop\"",
									"// through them using setNextRequest",
									"if(testData.products[testData.counter]){",
									"    pm.execution.setNextRequest(\"Get products after change\");",
									"}",
									"// Otherwise console.log \"All done\"",
									"else {",
									"    console.log(\"All products have been read correctly after the change.\");",
									"    // IMPORTANT: Set counter to 0 in preparation of next request",
									"    testData.counter = 0;",
									"    pm.collectionVariables.set(\"testData\",testData);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/products/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the test data\r",
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"\r",
									"// Get the current comments\r",
									"let comment = testData.commentsAdminMakes[testData.counter];\r",
									"\r",
									"// Replace the comment name in the property comment..\r",
									"// with actual id of the category\r",
									"\r",
									"// Find the correct category\r",
									"let commentWithMatchingName = testData.products.find(product => {\r",
									"    return product.name == comment.productId\r",
									"});\r",
									"// Change the categoryId property of the product\r",
									"// to the id of the matching category\r",
									"comment.productId = commentWithMatchingName.id;\r",
									"\r",
									"// Save changes to our test data (the new value of categoryId)\r",
									"pm.collectionVariables.set(\"testData\",testData);\r",
									"\r",
									"// pm variables have a scope of one request\r",
									"// setting four variables used in the body\r",
									"pm.variables.set(\"comment\", comment.comment);\r",
									"pm.variables.set(\"userId\", comment.userId);\r",
									"pm.variables.set(\"productId\", comment.productId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the test data\r",
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"// Get the current comments\r",
									"let comment = testData.commentsAdminMakes[testData.counter];\r",
									"\r",
									"// Read the response\r",
									"let response = pm.response;\r",
									"// Read the response data\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Test that we get a 200 code (ok request) back\r",
									"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test that affected rows equals 1\r",
									"pm.test(\"Expect rowsAffected to equal 1\", () => {\r",
									"    pm.expect(responseData.rowsAffected).to.equal(1);\r",
									"});\r",
									"\r",
									"// Test that we get an insert id back\r",
									"// also add the id in our test data (for future tests)\r",
									"pm.test(\"We should get an insertId back\", () => {\r",
									"    pm.expect(responseData.insertId).to.be.a('number');\r",
									"    // Add the property id to the comment with the\r",
									"    // id recieved from the REST-api\r",
									"    comment.id = responseData.insertId;\r",
									"    // Log\r",
									"    console.log(\"The comment has been created\", comment);\r",
									"});\r",
									"\r",
									"// Update the counter and save the updated test data\r",
									"// (also including the id we set in the second test)\r",
									"testData.counter++;\r",
									"pm.collectionVariables.set(\"testData\",testData);\r",
									"\r",
									"// If there are more products - then \"loop\"\r",
									"// through them using setNextRequest\r",
									"if(testData.commentsAdminMakes[testData.counter]){\r",
									"    pm.execution.setNextRequest(\"Create comments\");\r",
									"}\r",
									"// Otherwise console.log \"All done\"\r",
									"else {\r",
									"    console.log(\"All comments have been created.\");\r",
									"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
									"    testData.counter = 0;\r",
									"    pm.collectionVariables.set(\"testData\",testData);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comment\": \"{{comment}}\",\r\n    \"userId\": \"{{userId}}\",\r\n    \"productId\": {{productId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3001/api/comments",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the test data\r",
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"// Get the current category\r",
									"let comment = testData.commentsAdminMakes[testData.counter];\r",
									"\r",
									"// Set a pm variable to id (it is used in the request url)\r",
									"pm.variables.set(\"commentId\", comment.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the test data\r",
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"// Get the current comments\r",
									"let comment = testData.commentsAdminMakes[testData.counter];\r",
									"\r",
									"// Read the response\r",
									"let response = pm.response;\r",
									"// Read the response data\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Test that we get a 200 code (ok request) back\r",
									"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test that the REST-api returns the sama data\r",
									"// as our test data for the comment\r",
									"pm.test(\"Test that the correct comment data is returned\", ()=> {\r",
									"  console.log(\"comment\", comment);\r",
									"  console.log(\"responseData\", responseData);\r",
									"  pm.expect(comment).to.deep.equal(responseData); \r",
									"});\r",
									"\r",
									"// Update the counter and save the updated test data\r",
									"testData.counter++;\r",
									"pm.collectionVariables.set(\"testData\",testData);\r",
									"\r",
									"// If there are more comments - then \"loop\"\r",
									"// through them using setNextRequest\r",
									"if(testData.commentsAdminMakes[testData.counter]){\r",
									"    pm.execution.setNextRequest(\"Get comments\");\r",
									"}\r",
									"// Otherwise console.log \"All done\"\r",
									"else {\r",
									"    console.log(\"All comments have been read correctly.\");\r",
									"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
									"    testData.counter = 0;\r",
									"    pm.collectionVariables.set(\"testData\",testData);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/comments/{{commentId}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change comments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the test data\r",
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"// Get the current product\r",
									"let comment = testData.commentsAdminMakes[testData.counter];\r",
									"\r",
									"// Change the description and save to collectionVariables\r",
									"comment.comment += \" Some extra text in the comment.\";\r",
									"pm.collectionVariables.set(\"testData\", testData);\r",
									"\r",
									"pm.variables.set(\"commentid\", comment.id); \r",
									"\r",
									"\r",
									"// Set a pm variable to id (it is used in the request url)\r",
									"pm.variables.set(\"comment\", comment.comment);\r",
									"pm.variables.set(\"userId\", comment.userId);\r",
									"pm.variables.set(\"productId\", comment.productId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the test data\r",
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"// Get the current comment\r",
									"let comment = testData.commentsAdminMakes[testData.counter];\r",
									"\r",
									"// Read the response\r",
									"let response = pm.response;\r",
									"// Read the response data\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Test that we get a 200 code (ok request) back\r",
									"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test that affected rows equals 1\r",
									"pm.test(\"Expect rowsAffected to equal 1\", () => {\r",
									"    pm.expect(responseData.rowsAffected).to.equal(1);\r",
									"});\r",
									"\r",
									"// Update the counter and save the updated test data\r",
									"testData.counter++;\r",
									"pm.collectionVariables.set(\"testData\",testData);\r",
									"\r",
									"// If there are more comments - then \"loop\"\r",
									"// through them using setNextRequest\r",
									"if(testData.commentsAdminMakes[testData.counter]){\r",
									"    pm.execution.setNextRequest(\"Change comments\");\r",
									"}\r",
									"// Otherwise console.log \"All done\"\r",
									"else {\r",
									"    console.log(\"All comments have been changed.\");\r",
									"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
									"    testData.counter = 0;\r",
									"    pm.collectionVariables.set(\"testData\",testData);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comment\": \"{{comment}}\",\r\n    \"userId\": \"{{userId}}\",\r\n    \"productId\": {{productId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3001/api/comments/{{commentid}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"comments",
								"{{commentid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comments after change",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the test data\r",
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"// Get the current category\r",
									"let comment = testData.commentsAdminMakes[testData.counter];\r",
									"\r",
									"// Set a pm variable to id (it is used in the request url)\r",
									"pm.variables.set(\"commentId\", comment.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the test data\r",
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"// Get the current comments\r",
									"let comment = testData.commentsAdminMakes[testData.counter];\r",
									"\r",
									"// Read the response\r",
									"let response = pm.response;\r",
									"// Read the response data\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Test that we get a 200 code (ok request) back\r",
									"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"// Test that the REST-api returns the sama data\r",
									"// as our test data for the comment\r",
									"pm.test(\"Test that the correct comment data is returned\", ()=> {\r",
									"  console.log(\"comment\", comment);\r",
									"  console.log(\"responseData\", responseData);\r",
									"  pm.expect(comment).to.deep.equal(responseData); \r",
									"});\r",
									"\r",
									"// Update the counter and save the updated test data\r",
									"testData.counter++;\r",
									"pm.collectionVariables.set(\"testData\",testData);\r",
									"\r",
									"// If there are more comments - then \"loop\"\r",
									"// through them using setNextRequest\r",
									"if(testData.commentsAdminMakes[testData.counter]){\r",
									"    pm.execution.setNextRequest(\"Get comments after change\");\r",
									"}\r",
									"// Otherwise console.log \"All done\"\r",
									"else {\r",
									"    console.log(\"All comments have been read correctly.\");\r",
									"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
									"    testData.counter = 0;\r",
									"    pm.collectionVariables.set(\"testData\",testData);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/comments/{{commentId}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Login as user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"maria@nodehill.com\",\n    \"password\": \"12345678\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3001/api/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comments (user)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let comment = testData.commentsUserMakes[testData.counter];\r",
									"\r",
									"let commentWithMatchingName = testData.products.find(product => \r",
									"{\r",
									"    return product.name == comment.productId\r",
									"});\r",
									"comment.productId = commentWithMatchingName.id;\r",
									"\r",
									"pm.collectionVariables.set(\"testData\",testData);\r",
									"pm.variables.set(\"comment\", comment.comment);\r",
									"pm.variables.set(\"userId\", comment.userId);\r",
									"pm.variables.set(\"productId\", comment.productId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let comment = testData.commentsUserMakes[testData.counter];\r",
									"\r",
									"let response = pm.response;\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"We should get an ok (code 200) back\", ()=> \r",
									"{\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Expect rowsAffected to equal 1\", ()=> \r",
									"{\r",
									"    pm.expect(responseData.rowsAffected).to.equal(1);\r",
									"});\r",
									"\r",
									"pm.test(\"We should get an insertId back\", ()=> \r",
									"{\r",
									"    pm.expect(responseData.insertId).to.be.a('number');\r",
									"    comment.id = responseData.insertId;\r",
									"    console.log(\"The comment has been created\", comment);\r",
									"});\r",
									"\r",
									"testData.counter++;\r",
									"pm.collectionVariables.set(\"testData\",testData);\r",
									"\r",
									"if(testData.commentsUserMakes[testData.counter])\r",
									"{\r",
									"    pm.execution.setNextRequest(\"Create comments (user)\");\r",
									"}\r",
									"else \r",
									"{\r",
									"    console.log(\"All comments have been created.\");\r",
									"    testData.counter = 0;\r",
									"    pm.collectionVariables.set(\"testData\",testData);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"comment\": \"{{comment}}\",\r\n    \"userId\": \"{{userId}}\",\r\n    \"productId\": {{productId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3001/api/comments",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create products (user)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let product = testData.products[testData.counter];"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let product = testData.products[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get not Allowed (code 405) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(405);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/products",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create categories (user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get not Allowed (code 405) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(405);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"pm.variables.set(\"name\", category.name);",
									"pm.variables.set(\"description\", category.description);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/categories",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comments (user)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let comment = testData.commentsUserMakes[testData.counter];\r",
									"\r",
									"pm.variables.set(\"userCommentId\", comment.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let comment = testData.commentsUserMakes[testData.counter];\r",
									"\r",
									"let response = pm.response;\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"We should get an ok (code 200) back\",()=> {\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test that the correct comment data is returned\", ()=> {\r",
									"  console.log(\"comment\", comment);\r",
									"  console.log(\"responseData\", responseData);\r",
									"  pm.expect(comment).to.deep.equal(responseData); \r",
									"});\r",
									"\r",
									"testData.counter++;\r",
									"pm.collectionVariables.set(\"testData\",testData);\r",
									"\r",
									"if(testData.commentsUserMakes[testData.counter])\r",
									"{\r",
									"    pm.execution.setNextRequest(\"Get comments (user)\");\r",
									"}\r",
									"else \r",
									"{\r",
									"    console.log(\"All comments have been read correctly.\");\r",
									"    testData.counter = 0;\r",
									"    pm.collectionVariables.set(\"testData\",testData);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/comments/{{userCommentId}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"comments",
								"{{userCommentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products (user)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let product = testData.products[testData.counter];\r",
									"\r",
									"pm.variables.set(\"id\", product.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let product = testData.products[testData.counter];\r",
									"\r",
									"let response = pm.response;\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"We should get an ok (code 200) back\", ()=> \r",
									"{\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test that the correct product data is returned\", ()=> \r",
									"{\r",
									"  console.log(\"product\", product);\r",
									"  console.log(\"responseData\", responseData);\r",
									"  pm.expect(product).to.deep.equal(responseData); \r",
									"});\r",
									"\r",
									"testData.counter++;\r",
									"pm.collectionVariables.set(\"testData\",testData);\r",
									"\r",
									"if(testData.products[testData.counter]){\r",
									"    pm.execution.setNextRequest(\"Get products (user)\");\r",
									"}\r",
									"else \r",
									"{\r",
									"    console.log(\"All products have been read correctly.\");\r",
									"    testData.counter = 0;\r",
									"    pm.collectionVariables.set(\"testData\",testData);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/products/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get categories (user)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the test data",
									"let testData = pm.collectionVariables.get(\"testData\");",
									"// Get the current category",
									"let category = testData.categories[testData.counter];",
									"",
									"// Set a pm variable to id (it is used in the request url)",
									"pm.variables.set(\"id\", category.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get an ok (code 200) back\", () => ",
									"{",
									"    pm.expect(response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Test that the correct category data is returned\", () => ",
									"{",
									"  console.log(\"category\", category);",
									"  console.log(\"responseData\", responseData);",
									"  pm.expect(category).to.deep.equal(responseData); ",
									"});",
									"",
									"testData.counter++;",
									"pm.collectionVariables.set(\"testData\",testData);",
									"",
									"if(testData.categories[testData.counter])",
									"{",
									"    pm.execution.setNextRequest(\"Get categories (user)\");",
									"}",
									"else ",
									"{",
									"    console.log(\"All categories have been read correctly.\");",
									"    testData.counter = 0;",
									"    pm.collectionVariables.set(\"testData\",testData);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"categories",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change comments (user)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let comment = testData.commentsUserMakes[testData.counter];\r",
									"\r",
									"comment.comment += \" Some extra text in the comment.\";\r",
									"pm.collectionVariables.set(\"testData\", testData);\r",
									"\r",
									"pm.variables.set(\"userCommentId\", comment.id); \r",
									"pm.variables.set(\"comment\", comment.comment);\r",
									"pm.variables.set(\"userId\", comment.userId);\r",
									"pm.variables.set(\"productId\", comment.productId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let comment = testData.commentsUserMakes[testData.counter];\r",
									"\r",
									"let response = pm.response;\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"We should get an not Allowed (code 405) back\", ()=> \r",
									"{\r",
									"    pm.expect(response.code).to.equal(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/comments/{{userCommentId}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"comments",
								"{{userCommentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change products (user)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let product = testData.products[testData.counter];\r",
									"\r",
									"pm.variables.set(\"id\", product.id); \r",
									"pm.variables.set(\"description\", product.description);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let product = testData.products[testData.counter];\r",
									"\r",
									"let response = pm.response;\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"We should get an Not Allowed (code 405) back\", ()=> \r",
									"{\r",
									"    pm.expect(response.code).to.equal(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/products/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change categories (user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get not Allowed (code 405) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(405);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"pm.variables.set(\"id\", category.id); ",
									"pm.variables.set(\"description\", category.description);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"categories",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user comments (user)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let comment = testData.commentsUserMakes[testData.counter];",
									"",
									"pm.environment.set(\"userCommentId\", comment.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let comment = testData.commentsUserMakes[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get an not allowed (code 405) back\", () => ",
									"{",
									"    pm.expect(response.code).to.equal(405);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/comments/{{userCommentId}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"comments",
								"{{userCommentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete products (user)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let product = testData.products[testData.counter];",
									"",
									"pm.environment.set(\"id\", product.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let product = testData.products[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get an not allowed (code 405) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(405);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/products/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete categories (user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get an not allowed (code 405) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(405);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"pm.variables.set(\"id\", category.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"categories",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Visitor",
			"item": [
				{
					"name": "Get categories (visitor)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"pm.variables.set(\"id\", category.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get an ok (code 200) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Test that the correct category data is returned\", ()=> ",
									"{",
									"  console.log(\"HALLOO\")",
									"  console.log(\"category\", category);",
									"  console.log(\"responseData\", responseData);",
									"  ",
									"  pm.expect(category).to.deep.equal(responseData); ",
									"});",
									"",
									"testData.counter++;",
									"pm.collectionVariables.set(\"testData\",testData);",
									"",
									"if(testData.categories[testData.counter])",
									"{",
									"    pm.execution.setNextRequest(\"Get categories (visitor)\");",
									"}",
									"else ",
									"{",
									"    console.log(\"All categories have been read correctly.\");",
									"    testData.counter = 0;",
									"    pm.collectionVariables.set(\"testData\",testData);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"categories",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products (visitor)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let product = testData.products[testData.counter];\r",
									"\r",
									"pm.variables.set(\"id\", product.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let product = testData.products[testData.counter];\r",
									"\r",
									"let response = pm.response;\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"We should get an ok (code 200) back\",()=> \r",
									"{\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test that the correct product data is returned\", ()=> \r",
									"{\r",
									"  console.log(\"product\", product);\r",
									"  console.log(\"responseData\", responseData);\r",
									"  pm.expect(product).to.deep.equal(responseData); \r",
									"});\r",
									"\r",
									"testData.counter++;\r",
									"pm.collectionVariables.set(\"testData\",testData);\r",
									"\r",
									"if(testData.products[testData.counter])\r",
									"{\r",
									"    pm.execution.setNextRequest(\"Get products (visitor)\");\r",
									"}\r",
									"else \r",
									"{\r",
									"    console.log(\"All products have been read correctly.\");\r",
									"    testData.counter = 0;\r",
									"    pm.collectionVariables.set(\"testData\",testData);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/products/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comments (visitor)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let comment = testData.commentsAdminMakes[testData.counter];\r",
									"\r",
									"pm.variables.set(\"commentId\", comment.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let comment = testData.commentsAdminMakes[testData.counter];\r",
									"\r",
									"let response = pm.response;\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"We should get an ok (code 200) back\", ()=> \r",
									"{\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test that the correct comment data is returned\", ()=> \r",
									"{\r",
									"  console.log(\"comment\", comment);\r",
									"  console.log(\"responseData\", responseData);\r",
									"  pm.expect(comment).to.deep.equal(responseData); \r",
									"});\r",
									"\r",
									"testData.counter++;\r",
									"pm.collectionVariables.set(\"testData\",testData);\r",
									"\r",
									"if(testData.commentsAdminMakes[testData.counter])\r",
									"{\r",
									"    pm.execution.setNextRequest(\"Get comments (visitor)\");\r",
									"}\r",
									"else \r",
									"{\r",
									"    console.log(\"All comments have been read correctly.\");\r",
									"    testData.counter = 0;\r",
									"    pm.collectionVariables.set(\"testData\",testData);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/comments/{{commentId}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create categories (visitor)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get not Allowed (code 405) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(405);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"pm.variables.set(\"name\", category.name);",
									"pm.variables.set(\"description\", category.description);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/categories",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create products (visitor)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let product = testData.products[testData.counter];"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let product = testData.products[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get not Allowed (code 405) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(405);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/products",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comments (visitor)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let comment = testData.commentsAdminMakes[testData.counter];\r",
									"\r",
									"pm.variables.set(\"comment\", comment.comment);\r",
									"pm.variables.set(\"userId\", comment.userId);\r",
									"pm.variables.set(\"productId\", comment.productId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let comment = testData.commentsAdminMakes[testData.counter];\r",
									"\r",
									"let response = pm.response;\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"We should get not Allowed (code 405) back\", ()=> \r",
									"{\r",
									"    pm.expect(response.code).to.equal(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/comments",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change categories (visitor)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get not Allowed (code 405) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(405);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"pm.variables.set(\"id\", category.id); ",
									"pm.variables.set(\"description\", category.description);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"categories",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change products (visitor)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let product = testData.products[testData.counter];\r",
									"\r",
									"pm.variables.set(\"id\", product.id); \r",
									"pm.variables.set(\"description\", product.description);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let product = testData.products[testData.counter];\r",
									"\r",
									"let response = pm.response;\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"We should get an Not Allowed (code 405) back\", ()=> \r",
									"{\r",
									"    pm.expect(response.code).to.equal(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/products/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change comments (visitor)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let comment = testData.commentsAdminMakes[testData.counter];\r",
									"\r",
									"pm.variables.set(\"commentid\", comment.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let comment = testData.commentsAdminMakes[testData.counter];\r",
									"\r",
									"let response = pm.response;\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"We should get an not Allowed (code 405) back\", ()=> \r",
									"{\r",
									"    pm.expect(response.code).to.equal(405);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/comments/{{commentid}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"comments",
								"{{commentid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete categories (visitor)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get an not allowed (code 405) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(405);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"pm.variables.set(\"id\", category.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"categories",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete products (visitor)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let product = testData.products[testData.counter];",
									"",
									"pm.environment.set(\"id\", product.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let product = testData.products[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get an not allowed (code 405) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(405);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/products/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comments (visitor)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let comment = testData.commentsAdminMakes[testData.counter];",
									"",
									"pm.environment.set(\"usercommentId\", comment.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let comment = testData.commentsAdminMakes[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get an not allowed (code 405) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(405);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/comments/{{commentId}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reset DB",
			"item": [
				{
					"name": "Login as admin",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"thomas@nodehill.com\",\n    \"password\": \"12345678\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3001/api/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user comments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let comment = testData.commentsUserMakes[testData.counter];",
									"",
									"console.log(\"I AM A COMMENT FRAM DA UZER\", comment);",
									"pm.environment.set(\"userCommentId\", comment.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let comment = testData.commentsUserMakes[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get an ok (code 200) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Expect rowsAffected to equal 1\", () => ",
									"{",
									"    pm.expect(responseData.rowsAffected).to.equal(1);",
									"});",
									"",
									"testData.counter++;",
									"pm.collectionVariables.set(\"testData\", testData);",
									"",
									"if (testData.commentsUserMakes[testData.counter]) ",
									"{",
									"    pm.execution.setNextRequest(\"Delete user comments\");",
									"} ",
									"else ",
									"{",
									"    console.log(\"All comments have been deleted correctly.\");",
									"    testData.counter = 0;",
									"    pm.collectionVariables.set(\"testData\", testData);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/comments/{{userCommentId}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"comments",
								"{{userCommentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete admin comments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let comment = testData.commentsAdminMakes[testData.counter];",
									"",
									"console.log(\"DA WHOLE TEST DATA BEFORE FINAL DELETE\",testData);",
									"pm.environment.set(\"commentId\", comment.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let comment = testData.commentsAdminMakes[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get an ok (code 200) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Expect rowsAffected to equal 1\", () => ",
									"{",
									"    pm.expect(responseData.rowsAffected).to.equal(1);",
									"});",
									"",
									"testData.counter++;",
									"pm.collectionVariables.set(\"testData\", testData);",
									"",
									"if (testData.commentsAdminMakes[testData.counter]) ",
									"{",
									"    pm.execution.setNextRequest(\"Delete admin comments\");",
									"} ",
									"else ",
									"{",
									"    console.log(\"All comments have been deleted correctly.\");",
									"    testData.counter = 0;",
									"    pm.collectionVariables.set(\"testData\", testData);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/comments/{{commentId}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let productList = testData.products[testData.counter];\r",
									"\r",
									"pm.variables.set(\"id\", productList.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");\r",
									"let productList = testData.products[testData.counter];\r",
									"\r",
									"let response = pm.response;\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"We should get an ok (code 200) back\", ()=> \r",
									"{\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Expect rowsAffected to equal 1\", () => \r",
									"{\r",
									"    pm.expect(responseData.rowsAffected).to.equal(1);\r",
									"});\r",
									"\r",
									"testData.counter++;\r",
									"pm.collectionVariables.set(\"testData\",testData);\r",
									"\r",
									"if(testData.products[testData.counter])\r",
									"{\r",
									"    pm.execution.setNextRequest(\"Delete products\");\r",
									"}\r",
									"else {\r",
									"    console.log(\"All product have been deleted correctly.\");\r",
									"    testData.counter = 0;\r",
									"    pm.collectionVariables.set(\"testData\",testData);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/products/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"let response = pm.response;",
									"let responseData = pm.response.json();",
									"",
									"pm.test(\"We should get an ok (code 200) back\", ()=> ",
									"{",
									"    pm.expect(response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Expect rowsAffected to equal 1\", ()=> ",
									"{",
									"    pm.expect(responseData.rowsAffected).to.equal(1);",
									"});",
									"",
									"testData.counter++;",
									"pm.collectionVariables.set(\"testData\",testData);",
									"",
									"if(testData.categories[testData.counter])",
									"{",
									"    pm.execution.setNextRequest(\"Delete categories\");",
									"}",
									"else ",
									"{",
									"    console.log(\"All categories have been deleted correctly.\");",
									"    testData.counter = 0;",
									"    pm.collectionVariables.set(\"testData\",testData);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testData = pm.collectionVariables.get(\"testData\");",
									"let category = testData.categories[testData.counter];",
									"",
									"pm.variables.set(\"id\", category.id); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/categories/{{id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"categories",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:3001/api/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3001",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "data",
			"value": ""
		},
		{
			"key": "testData",
			"value": ""
		}
	]
}